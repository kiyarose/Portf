name: E2E Testing Suite (Screenshots & Accessibility)

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('e2e-pr-{0}', github.event.pull_request.number) || format('e2e-{0}', github.ref) }}
  cancel-in-progress: false # Don't cancel immediately - wait for timeout 

permissions:
  contents: write       # needed to push to gh-pages
  pages: write          # deploy with actions/deploy-pages
  id-token: write       # required by actions/deploy-pages
  pull-requests: write
  issues: write

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  e2e-tests:
    name: E2E Tests (Screenshots & A11y)
    runs-on: ubuntu-latest
    env:
      PORT: 4173  # Port for preview server and Playwright tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Simple notification for PR-specific concurrency
      - name: PR Test Info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            core.info(`Starting E2E tests for PR ${prNumber} with isolated concurrency group.`);
            core.info(`This PR will publish screenshots to: /(Dev-Shots)/PR-${prNumber}/`);

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build site
        run: npm run build

      # --- Added steps to start and wait for the preview server ---
      - name: Start preview server
        run: npm run preview -- --port $PORT &

      - name: Wait for server to be ready
        run: npx wait-on http://localhost:$PORT
      # -----------------------------------------------------------

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests (screenshots & accessibility)
        run: |
          npx playwright test tests/e2e.spec.ts tests/a11y.spec.ts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            playwright-logs/portfolio-web-light.png
            playwright-logs/portfolio-web-dark.png
            playwright-logs/portfolio-mobile-light.png
            playwright-logs/portfolio-mobile-dark.png
            playwright-report/**
            axe-report.json

      - name: Add screenshot to job summary
        run: |
          web_light="playwright-logs/portfolio-web-light.png"
          web_dark="playwright-logs/portfolio-web-dark.png"
          mobile_light="playwright-logs/portfolio-mobile-light.png"
          mobile_dark="playwright-logs/portfolio-mobile-dark.png"

          has_any=false
          if [ -f "$web_light" ] || [ -f "$web_dark" ] || [ -f "$mobile_light" ] || [ -f "$mobile_dark" ]; then
            has_any=true
          fi

          if [ "$has_any" = true ]; then
            {
              echo "## Web Render"
              if [ -f "$web_light" ] || [ -f "$web_dark" ]; then
                echo
                echo "### Web"
                if [ -f "$web_light" ]; then
                  echo
                  echo "#### Light"
                  echo
                  echo "![Web Light Render]($web_light)"
                fi
                if [ -f "$web_dark" ]; then
                  echo
                  echo "#### Dark"
                  echo
                  echo "![Web Dark Render]($web_dark)"
                fi
              fi
              if [ -f "$mobile_light" ] || [ -f "$mobile_dark" ]; then
                echo
                echo "### Mobile"
                if [ -f "$mobile_light" ]; then
                  echo
                  echo "#### Light"
                  echo
                  echo "![Mobile Light Render]($mobile_light)"
                fi
                if [ -f "$mobile_dark" ]; then
                  echo
                  echo "#### Dark"
                  echo
                  echo "![Mobile Dark Render]($mobile_dark)"
                fi
              fi
              echo
              echo "_This screenshot was generated by Playwright during the latest workflow run._"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "⚠️ Screenshots not found." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Prepare Pages payload and workspace archive
        id: prep_pages
        run: |
          # Use PR-specific directory structure instead of run-based
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            pr_number="${{ github.event.pull_request.number }}"
            pages_root="_screenshot_publish/(Dev-Shots)/PR-${pr_number}"
            repo_root="(Dev-Shots)/PR-${pr_number}"
          else
            # For main branch, use run-based structure
            run_dir=${{ github.run_id }}
            pages_root="_screenshot_publish/(Dev-Shots)/screenshots/$run_dir"
            repo_root="(Dev-Shots)/screenshots/$run_dir"
          fi

          rm -rf _screenshot_publish
          mkdir -p "$pages_root"
          mkdir -p "$repo_root"

          files=(
            "portfolio-web-light.png"
            "portfolio-web-dark.png"
            "portfolio-mobile-light.png"
            "portfolio-mobile-dark.png"
          )

          found=false
          found_web=false
          found_mobile=false
          found_web_light=false
          found_web_dark=false
          found_mobile_light=false
          found_mobile_dark=false

          for file in "${files[@]}"; do
            src="playwright-logs/$file"
            if [ -f "$src" ]; then
              cp "$src" "$pages_root/$file"
              cp "$src" "$repo_root/$file"
              found=true

              case "$file" in
                portfolio-web-light.png)
                  found_web=true
                  found_web_light=true
                  ;;
                portfolio-web-dark.png)
                  found_web=true
                  found_web_dark=true
                  ;;
                portfolio-mobile-light.png)
                  found_mobile=true
                  found_mobile_light=true
                  ;;
                portfolio-mobile-dark.png)
                  found_mobile=true
                  found_mobile_dark=true
                  ;;
              esac
            fi
          done

          if [ "$found" = true ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_web" = true ]; then
            echo "found_web=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_web=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_mobile" = true ]; then
            echo "found_mobile=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_mobile=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_web_light" = true ]; then
            echo "found_web_light=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_web_light=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_web_dark" = true ]; then
            echo "found_web_dark=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_web_dark=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_mobile_light" = true ]; then
            echo "found_mobile_light=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_mobile_light=false" >> "$GITHUB_OUTPUT"
          fi

          if [ "$found_mobile_dark" = true ]; then
            echo "found_mobile_dark=true" >> "$GITHUB_OUTPUT"
          else
            echo "found_mobile_dark=false" >> "$GITHUB_OUTPUT"
          fi

          # Store the repo root for use in later steps (remove the leading parentheses part)
          repo_root_clean="${repo_root#(Dev-Shots)/}"
          echo "repo_root=$repo_root_clean" >> "$GITHUB_OUTPUT"

      # Publish screenshot via GitHub Pages for same-repo runs/PRs
      - name: Configure GitHub Pages
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: actions/configure-pages@v4

      - name: Upload screenshot to Pages artifact
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: actions/upload-pages-artifact@v3
        with:
          path: _screenshot_publish
          name: github-pages-screenshot-${{ github.run_id }}

      - name: Deploy GitHub Pages site
        id: deploy
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        uses: actions/deploy-pages@v4
        with:
          preview: ${{ github.event_name == 'pull_request' }}
          artifact_name: github-pages-screenshot-${{ github.run_id }}

      - name: Add GitHub Pages link to job summary
        if: steps.prep_pages.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false)
        run: |
          page_url="${{ steps.deploy.outputs.preview_url }}"
          if [ -z "$page_url" ]; then
            page_url="${{ steps.deploy.outputs.page_url }}"
          fi

          if [ -n "$page_url" ]; then
            base_url="${page_url%/}/(Dev-Shots)"
            repo_root="${{ steps.prep_pages.outputs.repo_root }}"
            web_found="${{ steps.prep_pages.outputs.found_web }}"
            web_light_found="${{ steps.prep_pages.outputs.found_web_light }}"
            web_dark_found="${{ steps.prep_pages.outputs.found_web_dark }}"
            mobile_found="${{ steps.prep_pages.outputs.found_mobile }}"
            mobile_light_found="${{ steps.prep_pages.outputs.found_mobile_light }}"
            mobile_dark_found="${{ steps.prep_pages.outputs.found_mobile_dark }}"
            {
              echo "### GitHub Pages Screenshots"
              echo
              if [ "$web_found" = 'true' ]; then
                if [ "$web_light_found" = 'true' ]; then
                  echo "- [View Web · Light](${base_url}/${repo_root}/portfolio-web-light.png)"
                fi
                if [ "$web_dark_found" = 'true' ]; then
                  echo "- [View Web · Dark](${base_url}/${repo_root}/portfolio-web-dark.png)"
                fi
              fi
              if [ "$mobile_found" = 'true' ]; then
                if [ "$mobile_light_found" = 'true' ]; then
                  echo "- [View Mobile · Light](${base_url}/${repo_root}/portfolio-mobile-light.png)"
                fi
                if [ "$mobile_dark_found" = 'true' ]; then
                  echo "- [View Mobile · Dark](${base_url}/${repo_root}/portfolio-mobile-dark.png)"
                fi
              fi
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      # Comment inline (same-repo PRs only)
      - name: Comment on PR with inline screenshot (Pages URL)
        if: steps.prep_pages.outputs.found == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v7
        env:
          PAGE_URL: ${{ steps.deploy.outputs.page_url }}
          PREVIEW_URL: ${{ steps.deploy.outputs.preview_url }}
          WEB_FOUND: ${{ steps.prep_pages.outputs.found_web }}
          MOBILE_FOUND: ${{ steps.prep_pages.outputs.found_mobile }}
          WEB_LIGHT_FOUND: ${{ steps.prep_pages.outputs.found_web_light }}
          WEB_DARK_FOUND: ${{ steps.prep_pages.outputs.found_web_dark }}
          MOBILE_LIGHT_FOUND: ${{ steps.prep_pages.outputs.found_mobile_light }}
          MOBILE_DARK_FOUND: ${{ steps.prep_pages.outputs.found_mobile_dark }}
          REPO_ROOT: ${{ steps.prep_pages.outputs.repo_root }}
        with:
          script: |
            const prNumber = context.issue.number;
            const baseUrl = (process.env.PREVIEW_URL || process.env.PAGE_URL || '').replace(/\/$/, '');
            if (!baseUrl) {
              core.info('Pages URL missing; skipping comment.');
              return;
            }
            const siteBaseUrl = `${baseUrl}/(Dev-Shots)`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = context.issue.number;
            const marker = '<!-- web-render-screenshot -->';
            const commitSha = context.sha.slice(0, 7);
            const commitUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${context.sha}`;
            const webFound = process.env.WEB_FOUND === 'true';
            const mobileFound = process.env.MOBILE_FOUND === 'true';
            const webLightFound = process.env.WEB_LIGHT_FOUND === 'true';
            const webDarkFound = process.env.WEB_DARK_FOUND === 'true';
            const mobileLightFound = process.env.MOBILE_LIGHT_FOUND === 'true';
            const mobileDarkFound = process.env.MOBILE_DARK_FOUND === 'true';
            const repoRoot = process.env.REPO_ROOT;
            
            const sections = [
              marker,
              '**Web Render**',
              '',
              `Commit: [\`${commitSha}\`](${commitUrl})`,
              ''
            ];

            if (webFound) {
              const webLightUrl = `${siteBaseUrl}/${repoRoot}/portfolio-web-light.png`;
              const webDarkUrl = `${siteBaseUrl}/${repoRoot}/portfolio-web-dark.png`;
              const webContent = [];

              if (webLightFound || webDarkFound) {
                webContent.push('<table><tr>');
                if (webLightFound) {
                  webContent.push(
                    `<td style="padding:0 8px 16px; text-align:center;">` +
                      `<div><strong>Light</strong></div>` +
                      `<img src="${webLightUrl}" alt="Playwright screenshot of the portfolio (web · light)" width="320" />` +
                    `</td>`
                  );
                }
                if (webDarkFound) {
                  webContent.push(
                    `<td style="padding:0 8px 16px; text-align:center;">` +
                      `<div><strong>Dark</strong></div>` +
                      `<img src="${webDarkUrl}" alt="Playwright screenshot of the portfolio (web · dark)" width="320" />` +
                    `</td>`
                  );
                }
                webContent.push('</tr></table>', '');
              } else {
                webContent.push('_Web render unavailable for this run._', '');
              }

              sections.push('<details>', '<summary>View Web</summary>', '', ...webContent, '</details>', '');
            }

            if (mobileFound) {
              const mobileLightUrl = `${siteBaseUrl}/${repoRoot}/portfolio-mobile-light.png`;
              const mobileDarkUrl = `${siteBaseUrl}/${repoRoot}/portfolio-mobile-dark.png`;
              const mobileContent = [];

              if (mobileLightFound || mobileDarkFound) {
                mobileContent.push('<table><tr>');
                if (mobileLightFound) {
                  mobileContent.push(
                    `<td style="padding:0 8px 16px; text-align:center;">` +
                      `<div><strong>Light</strong></div>` +
                      `<img src="${mobileLightUrl}" alt="Playwright screenshot of the portfolio (mobile · light)" width="240" />` +
                    `</td>`
                  );
                }
                if (mobileDarkFound) {
                  mobileContent.push(
                    `<td style="padding:0 8px 16px; text-align:center;">` +
                      `<div><strong>Dark</strong></div>` +
                      `<img src="${mobileDarkUrl}" alt="Playwright screenshot of the portfolio (mobile · dark)" width="240" />` +
                    `</td>`
                  );
                }
                mobileContent.push('</tr></table>', '');
              } else {
                mobileContent.push('_Mobile render unavailable for this run._', '');
              }

              sections.push('<details>', '<summary>View Mobile</summary>', '', ...mobileContent, '</details>', '');
            }

            if (!webFound && !mobileFound) {
              sections.push('_No screenshots available for this run._', '');
            }

            sections.push('_This screenshot was generated by Playwright during the latest workflow run._');

            const body = sections.join('\n');

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: issueNumber,
            });

            // Check for existing screenshot comments
            const existing = comments.find((comment) => comment.body && comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body,
              });
            }

      # Fallback for forked PRs (can’t push to gh-pages)
      - name: Comment on PR (fork fallback)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const marker = '<!-- web-render-screenshot -->';
            const commitSha = context.sha.slice(0, 7);
            const commitUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${context.sha}`;
            const body = [
              marker,
              '**Web Render**',
              '',
              `Commit: [\`${commitSha}\`](${commitUrl})`,
              '',
              'Inline image is unavailable for forked PRs due to token restrictions.',
              '',
              `Please view the Light & Dark captures in the [workflow run summary](${runUrl}).`,
              '',
              '_This screenshot was generated by Playwright during the latest workflow run._'
            ].join('\n');

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = context.issue.number;

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: issueNumber,
            });

            const existing = comments.find((comment) => comment.body && comment.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issueNumber,
                body,
              });
            }
