name: Project Board Automation

on:
  issues:
    types: [opened, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]

permissions:
  issues: write
  pull-requests: write
  repository-projects: write
  contents: read

jobs:
  manage-project-items:
    runs-on: ubuntu-latest
    steps:
      - name: Add issue to Portfolio Devmt project
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issueNumber = context.payload.issue.number;
            
            // Get organization projects (you may need to adjust this for user projects)
            try {
              // This is a simplified approach - you may need to use GraphQL for more complex project management
              console.log(`Issue #${issueNumber} opened - would add to Portfolio Devmt project and set to backlog`);
              
              // Note: GitHub's REST API has limited project board support for the newer Projects (beta)
              // For full automation, you might need to use GraphQL API
              // This is a placeholder that logs the action
              
            } catch (error) {
              console.log('Could not add to project:', error.message);
            }

      - name: Move issue to in-progress when PR is linked
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'ready_for_review')
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Get PR details to find linked issues
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            console.log('Found linked issues:', Array.from(issueNumbers));
            
            for (const issueNumber of issueNumbers) {
              try {
                if (pr.draft) {
                  console.log(`PR #${prNumber} is draft - issue #${issueNumber} should be in-progress`);
                  // Move issue to "in-progress" status in project board
                } else {
                  console.log(`PR #${prNumber} is ready for review - issue #${issueNumber} should be "In review"`);
                  // Move both issue and PR to "In review" status in project board
                }
              } catch (error) {
                console.log(`Could not update status for issue #${issueNumber}:`, error.message);
              }
            }

      - name: Update status based on PR review state
        if: github.event_name == 'pull_request' && (github.event.action == 'ready_for_review' || github.event.action == 'converted_to_draft')
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            const newStatus = pr.draft ? 'In Progress' : 'In Review';
            console.log(`PR #${prNumber} status changed - should update linked issues to: ${newStatus}`);
            
            for (const issueNumber of issueNumbers) {
              console.log(`Would update issue #${issueNumber} to status: ${newStatus}`);
              // Here you would update the project board status
              // This requires GraphQL API for the new Projects (beta)
            }

  sync-milestones:
    runs-on: ubuntu-latest
    steps:
      - name: Sync milestones between linked issues and PRs
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            if (issueNumbers.size === 0) {
              console.log('No linked issues found for milestone sync');
              return;
            }
            
            // Get milestone from the first linked issue and apply to PR
            for (const issueNumber of issueNumbers) {
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: issueNumber,
                });
                
                if (issue.milestone && !pr.milestone) {
                  // Apply milestone from issue to PR
                  await github.rest.issues.update({
                    owner,
                    repo,
                    issue_number: prNumber,
                    milestone: issue.milestone.number,
                  });
                  
                  console.log(`Applied milestone "${issue.milestone.title}" from issue #${issueNumber} to PR #${prNumber}`);
                  break; // Only sync from first issue with a milestone
                } else if (!issue.milestone && pr.milestone) {
                  // Apply milestone from PR to issue
                  await github.rest.issues.update({
                    owner,
                    repo,
                    issue_number: issueNumber,
                    milestone: pr.milestone.number,
                  });
                  
                  console.log(`Applied milestone "${pr.milestone.title}" from PR #${prNumber} to issue #${issueNumber}`);
                }
              } catch (error) {
                console.log(`Could not sync milestone for issue #${issueNumber}:`, error.message);
              }
            }