name: Project Board Automation

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened, closed, ready_for_review, converted_to_draft]

permissions:
  issues: write
  pull-requests: write
  contents: read
  repository-projects: write

env:
  PROJECT_NAME: "Portfolio Devmt"

jobs:
  add-issue-to-backlog:
    name: Add new issue to backlog
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add issue to project backlog
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueId = issue.node_id;
            const issueNumber = issue.number;
            
            // Query to find the project and add the issue
            const findProjectQuery = `
              query($owner: String!) {
                user(login: $owner) {
                  projectsV2(first: 20) {
                    nodes {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            try {
              // Find the project
              const projectResult = await github.graphql(findProjectQuery, {
                owner: context.repo.owner
              });
              
              const project = projectResult.user.projectsV2.nodes.find(p => 
                p.title === process.env.PROJECT_NAME
              );
              
              if (!project) {
                console.log(`❌ Project "${process.env.PROJECT_NAME}" not found`);
                console.log('Available projects:', projectResult.user.projectsV2.nodes.map(p => p.title));
                return;
              }
              
              console.log(`✅ Found project: ${project.title} (${project.id})`);
              
              // Add issue to project
              const addItemMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              const addResult = await github.graphql(addItemMutation, {
                projectId: project.id,
                contentId: issueId
              });
              
              const itemId = addResult.addProjectV2ItemById.item.id;
              console.log(`✅ Added issue #${issueNumber} to project (item ID: ${itemId})`);
              
              // Find the Status field and Backlog option
              const statusField = project.fields.nodes.find(f => 
                f.name === 'Status' && f.options
              );
              
              if (!statusField) {
                console.log('⚠️  Status field not found, item added without specific status');
                return;
              }
              
              const backlogOption = statusField.options.find(o => 
                o.name === 'Backlog'
              );
              
              if (!backlogOption) {
                console.log('⚠️  Backlog status not found');
                console.log('Available statuses:', statusField.options.map(o => o.name));
                return;
              }
              
              // Set item status to Backlog
              const updateStatusMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(updateStatusMutation, {
                projectId: project.id,
                itemId: itemId,
                fieldId: statusField.id,
                value: { singleSelectOptionId: backlogOption.id }
              });
              
              console.log(`✅ Set issue #${issueNumber} status to "Backlog"`);
              
            } catch (error) {
              console.error('❌ Error managing project:', error.message);
              if (error.errors) {
                console.error('GraphQL errors:', JSON.stringify(error.errors, null, 2));
              }
            }

  manage-pr-status:
    name: Manage issue status based on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Update linked issue status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const action = context.payload.action;
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            if (issueNumbers.size === 0) {
              console.log('ℹ️  No linked issues found in PR');
              return;
            }
            
            console.log(`🔗 Found ${issueNumbers.size} linked issue(s):`, Array.from(issueNumbers));
            
            // Determine target status based on PR state and action
            let targetStatus = null;
            
            if (action === 'opened' || action === 'converted_to_draft') {
              targetStatus = 'In Progress';
            } else if (action === 'ready_for_review') {
              targetStatus = 'In Review';
            } else if (action === 'closed' && pr.merged) {
              targetStatus = 'In Review';  // Set to In Review when merged (not Done, per requirements)
            } else if (action === 'closed' && !pr.merged) {
              console.log('ℹ️  PR closed without merging - not updating issue status per requirements');
              return;
            }
            
            if (!targetStatus) {
              console.log(`ℹ️  No status update needed for action: ${action}`);
              return;
            }
            
            console.log(`📊 Target status: "${targetStatus}"`);
            
            // Query to find the project and get issue details
            const findProjectQuery = `
              query($owner: String!) {
                user(login: $owner) {
                  projectsV2(first: 20) {
                    nodes {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            try {
              // Find the project
              const projectResult = await github.graphql(findProjectQuery, {
                owner: context.repo.owner
              });
              
              const project = projectResult.user.projectsV2.nodes.find(p => 
                p.title === process.env.PROJECT_NAME
              );
              
              if (!project) {
                console.log(`❌ Project "${process.env.PROJECT_NAME}" not found`);
                return;
              }
              
              console.log(`✅ Found project: ${project.title}`);
              
              // Find the Status field and target option
              const statusField = project.fields.nodes.find(f => 
                f.name === 'Status' && f.options
              );
              
              if (!statusField) {
                console.log('❌ Status field not found in project');
                return;
              }
              
              const targetOption = statusField.options.find(o => 
                o.name === targetStatus
              );
              
              if (!targetOption) {
                console.log(`❌ Status "${targetStatus}" not found in project`);
                console.log('Available statuses:', statusField.options.map(o => o.name));
                return;
              }
              
              // Update status for each linked issue
              const updateStatusMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              for (const issueNumber of issueNumbers) {
                // Find the project item for this issue
                const projectItem = project.items.nodes.find(item => 
                  item.content && item.content.number === issueNumber
                );
                
                if (!projectItem) {
                  console.log(`⚠️  Issue #${issueNumber} not found in project, skipping`);
                  continue;
                }
                
                await github.graphql(updateStatusMutation, {
                  projectId: project.id,
                  itemId: projectItem.id,
                  fieldId: statusField.id,
                  value: { singleSelectOptionId: targetOption.id }
                });
                
                console.log(`✅ Updated issue #${issueNumber} status to "${targetStatus}"`);
              }
              
            } catch (error) {
              console.error('❌ Error updating issue status:', error.message);
              if (error.errors) {
                console.error('GraphQL errors:', JSON.stringify(error.errors, null, 2));
              }
            }
