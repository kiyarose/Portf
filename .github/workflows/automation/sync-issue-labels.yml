name: Sync Issue Labels to PRs

on:
  pull_request:
    types: [opened, synchronize, edited]
  issues:
    types: [labeled, unlabeled]

permissions:
  issues: read
  pull-requests: write
  contents: read

jobs:
  sync-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Sync labels from linked issues to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            
            // Get PR details to find linked issues
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber,
            });
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            console.log('Found linked issues:', Array.from(issueNumbers));
            
            if (issueNumbers.size === 0) {
              console.log('No linked issues found, skipping label sync');
              return;
            }
            
            // Collect all labels from linked issues
            const issueLabels = new Set();
            
            for (const issueNumber of issueNumbers) {
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner,
                  repo,
                  issue_number: issueNumber,
                });
                
                issue.labels.forEach(label => {
                  if (typeof label === 'object' && label.name) {
                    issueLabels.add(label.name);
                  }
                });
              } catch (error) {
                console.log(`Could not fetch issue #${issueNumber}:`, error.message);
              }
            }
            
            console.log('Labels from linked issues:', Array.from(issueLabels));
            
            if (issueLabels.size === 0) {
              console.log('No labels found on linked issues');
              return;
            }
            
            // Apply labels to PR
            await github.rest.issues.setLabels({
              owner,
              repo,
              issue_number: prNumber,
              labels: Array.from(issueLabels),
            });
            
            console.log(`Applied ${issueLabels.size} labels to PR #${prNumber}`);

      - name: Sync labels to linked PRs when issue labels change
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issueNumber = context.payload.issue.number;
            
            // Find PRs that reference this issue
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
            });
            
            const linkedPRs = [];
            
            for (const pr of prs) {
              const prText = `${pr.title} ${pr.body || ''}`;
              const issuePattern = new RegExp(`#${issueNumber}|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#${issueNumber}|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/${issueNumber}`, 'i');
              
              if (issuePattern.test(prText)) {
                linkedPRs.push(pr.number);
              }
            }
            
            console.log(`Found ${linkedPRs.length} PRs linked to issue #${issueNumber}:`, linkedPRs);
            
            if (linkedPRs.length === 0) {
              console.log('No linked PRs found');
              return;
            }
            
            // Get current issue labels
            const { data: issue } = await github.rest.issues.get({
              owner,
              repo,
              issue_number: issueNumber,
            });
            
            const issueLabels = issue.labels.map(label => 
              typeof label === 'object' ? label.name : label
            ).filter(Boolean);
            
            console.log('Issue labels:', issueLabels);
            
            // Apply labels to each linked PR
            for (const prNumber of linkedPRs) {
              try {
                await github.rest.issues.setLabels({
                  owner,
                  repo,
                  issue_number: prNumber,
                  labels: issueLabels,
                });
                
                console.log(`Applied labels to PR #${prNumber}`);
              } catch (error) {
                console.log(`Failed to apply labels to PR #${prNumber}:`, error.message);
              }
            }