name: GitHub Projects Integration

on:
  issues:
    types: [opened, closed, reopened]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]

permissions:
  issues: write
  pull-requests: write
  repository-projects: write
  contents: read

env:
  PROJECT_NAME: "Portfolio Devmt"

jobs:
  project-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Add new issues to project backlog
        if: github.event_name == 'issues' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const query = `
              query($owner: String!, $name: String!) {
                user(login: $owner) {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                    }
                  }
                }
                repository(owner: $owner, name: $name) {
                  issue(number: ${{ github.event.issue.number }}) {
                    id
                  }
                }
              }
            `;
            
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo
            };
            
            try {
              const result = await github.graphql(query, variables);
              
              // Find the "Portfolio Devmt" project
              const project = result.user.projectsV2.nodes.find(p => 
                p.title === process.env.PROJECT_NAME
              );
              
              if (!project) {
                console.log(`Project "${process.env.PROJECT_NAME}" not found. Available projects:`, 
                  result.user.projectsV2.nodes.map(p => p.title));
                return;
              }
              
              // Add issue to project
              const addToProjectMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemByContentId(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(addToProjectMutation, {
                projectId: project.id,
                contentId: result.repository.issue.id
              });
              
              console.log(`Added issue #${{ github.event.issue.number }} to "${process.env.PROJECT_NAME}" project`);
              
            } catch (error) {
              console.log('Error adding issue to project:', error.message);
              // Fallback: just log that we would add it
              console.log(`Would add issue #${{ github.event.issue.number }} to "${process.env.PROJECT_NAME}" project backlog`);
            }

      - name: Update issue status when PR is created/updated
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            if (issueNumbers.size === 0) {
              console.log('No linked issues found');
              return;
            }
            
            console.log('Found linked issues:', Array.from(issueNumbers));
            
            // Determine target status based on PR state
            let targetStatus;
            if (pr.state === 'closed') {
              targetStatus = pr.merged ? 'Done' : 'Backlog';
            } else if (pr.draft) {
              targetStatus = 'In Progress';
            } else {
              targetStatus = 'In Review';
            }
            
            console.log(`PR #${prNumber} state: ${pr.state}, draft: ${pr.draft}, merged: ${pr.merged}`);
            console.log(`Target status for linked issues: ${targetStatus}`);
            
            // For now, just log what we would do
            // In a full implementation, you would use GraphQL to update project item status
            for (const issueNumber of issueNumbers) {
              console.log(`Would update issue #${issueNumber} to status: ${targetStatus}`);
            }

      - name: Sync PR to project when linked to issues
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            
            // Extract issue numbers from PR body and title
            const prText = `${pr.title} ${pr.body || ''}`;
            const issuePattern = /#(\d+)|(?:close[ds]?|fix(?:e[ds]?)?|resolve[ds]?)\s+#(\d+)|(?:https?:\/\/)?(?:www\.)?github\.com\/[^\/]+\/[^\/]+\/issues\/(\d+)/gi;
            const issueNumbers = new Set();
            let match;
            
            while ((match = issuePattern.exec(prText)) !== null) {
              const issueNum = match[1] || match[2] || match[3];
              if (issueNum) {
                issueNumbers.add(parseInt(issueNum));
              }
            }
            
            if (issueNumbers.size > 0) {
              console.log(`PR #${prNumber} is linked to issues:`, Array.from(issueNumbers));
              console.log(`Would add PR #${prNumber} to "${process.env.PROJECT_NAME}" project with "In Progress" status`);
              
              // In a full implementation, you would add the PR to the project here
            } else {
              console.log(`PR #${prNumber} has no linked issues, not adding to project`);
            }